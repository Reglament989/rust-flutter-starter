// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Dart bindings to call mylib functions
class RustBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Int8> rust_greeting(
    ffi.Pointer<ffi.Int8> to,
  ) {
    return _rust_greeting(
      to,
    );
  }

  late final _rust_greeting_ptr =
      _lookup<ffi.NativeFunction<_c_rust_greeting>>('rust_greeting');
  late final _dart_rust_greeting _rust_greeting =
      _rust_greeting_ptr.asFunction<_dart_rust_greeting>();

  void rust_cstr_free(
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _rust_cstr_free(
      s,
    );
  }

  late final _rust_cstr_free_ptr =
      _lookup<ffi.NativeFunction<_c_rust_cstr_free>>('rust_cstr_free');
  late final _dart_rust_cstr_free _rust_cstr_free =
      _rust_cstr_free_ptr.asFunction<_dart_rust_cstr_free>();

  void database_init() {
    return _database_init();
  }

  late final _database_init_ptr =
      _lookup<ffi.NativeFunction<_c_database_init>>('database_init');
  late final _dart_database_init _database_init =
      _database_init_ptr.asFunction<_dart_database_init>();

  void database_create_user(
    ffi.Pointer<ffi.Int8> to,
  ) {
    return _database_create_user(
      to,
    );
  }

  late final _database_create_user_ptr =
      _lookup<ffi.NativeFunction<_c_database_create_user>>(
          'database_create_user');
  late final _dart_database_create_user _database_create_user =
      _database_create_user_ptr.asFunction<_dart_database_create_user>();

  ffi.Pointer<Vec_ExternUser> database_fetch_users() {
    return _database_fetch_users();
  }

  late final _database_fetch_users_ptr =
      _lookup<ffi.NativeFunction<_c_database_fetch_users>>(
          'database_fetch_users');
  late final _dart_database_fetch_users _database_fetch_users =
      _database_fetch_users_ptr.asFunction<_dart_database_fetch_users>();

  ExternTodo get_one_todo_ffi() {
    return _get_one_todo_ffi();
  }

  late final _get_one_todo_ffi_ptr =
      _lookup<ffi.NativeFunction<_c_get_one_todo_ffi>>('get_one_todo_ffi');
  late final _dart_get_one_todo_ffi _get_one_todo_ffi =
      _get_one_todo_ffi_ptr.asFunction<_dart_get_one_todo_ffi>();
}

class Vec_ExternUser extends ffi.Opaque {}

class ExternTodo extends ffi.Struct {
  @ffi.Int32()
  external int user_id;

  @ffi.Int32()
  external int id;

  external ffi.Pointer<ffi.Int8> title;

  @ffi.Int32()
  external int completed;
}

typedef _c_rust_greeting = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> to,
);

typedef _dart_rust_greeting = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> to,
);

typedef _c_rust_cstr_free = ffi.Void Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _dart_rust_cstr_free = void Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _c_database_init = ffi.Void Function();

typedef _dart_database_init = void Function();

typedef _c_database_create_user = ffi.Void Function(
  ffi.Pointer<ffi.Int8> to,
);

typedef _dart_database_create_user = void Function(
  ffi.Pointer<ffi.Int8> to,
);

typedef _c_database_fetch_users = ffi.Pointer<Vec_ExternUser> Function();

typedef _dart_database_fetch_users = ffi.Pointer<Vec_ExternUser> Function();

typedef _c_get_one_todo_ffi = ExternTodo Function();

typedef _dart_get_one_todo_ffi = ExternTodo Function();
